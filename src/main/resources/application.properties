# Deployment info
deploy-info.artifact=@project.artifactId@
deploy-info.version=@project.version@
deploy-info.build-time=@timestamp@

# Application health check and info
management.endpoint.health.show-details = always
management.endpoint.health.show-components = always
management.endpoint.health.probes.enabled=true
management.endpoints.web.exposure.include = health, info, prometheus

management.endpoint.health.status.order = fatal,down,out-of-service,unknown,up
management.endpoint.health.status.http-mapping.down = 503
management.endpoint.health.status.http-mapping.fatal = 500
management.endpoint.health.status.http-mapping.out-of-service = 410
management.endpoint.health.status.http-mapping.unknown = 420

# The property names corresponds directly to the HTTP header names, with one additional trick:
# Allow-Origin can be a comma-separated list rather than a single origin.
cors.Access-Control-Allow-Origin=${CORS_ALLOW_ORIGIN: http://localhost:4200/, http://localhost:8084}
cors.Access-Control-Allow-Methods=GET, PUT, POST, DELETE, HEAD, OPTIONS
cors.Access-Control-Allow-Headers=Authorization, Accept, Origin, Content-Type, Cache-Control, If-None-Match
cors.Access-Control-Expose-Headers=Access-Control-Allow-Origin, ETag
cors.Access-Control-Max-Age=86400

# Authorization
# Using existing environment keys for compatibility
auth.keycloak.realm=${KEYCLOAK_REALM:dassco}
auth.serverRootUrl=${KEYCLOAK_AUTH_SERVER_URL:http://localhost:8083/keycloak/}
auth.clientName=${KEYCLOAK_RESOURCE:dassco-asset-service}
auth.serverUrl=${auth.serverRootUrl}realms/${auth.keycloak.realm}

spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${auth.serverUrl}/protocol/openid-connect/certs

spring.task.scheduling.pool.size=5
# Postgres datasource
datasource.jdbcUrl=${POSTGRES_URL:jdbc:postgresql://localhost:5433/dassco_file_proxy}
datasource.username=${POSTGRES_USER:dassco_file_proxy}
datasource.password=${POSTGRES_PASSWORD:dassco_file_proxy}
datasource.connectionTimeout=${POSTGRES_CONNECTION_TIMEOUT:30000}
datasource.idleTimeout=${POSTGRES_IDLE_TIMEOUT:600000}
datasource.maxLifetime=${POSTGRES_MAX_LIFETIME:1800000}
datasource.minimumIdle=${POSTGRES_MINIMUM_IDLE:2}
datasource.maximumPoolSize=${POSTGRES_MAXIMUM_POOL_SIZE:5}

# Keycloak admin config
keycloak.admin.keycloakUrl=${auth.serverRootUrl}
keycloak.admin.climbalongRealm=${auth.keycloak.realm}
keycloak.admin.adminRealm=${KEYCLOAK_ADMIN_REALM:dassco}
keycloak.admin.clientId=${KEYCLOAK_ADMIN_CLIENT_ID:dassco-file-proxy}
keycloak.admin.clientSecret=${KEYCLOAK_ADMIN_CLIENT_SECRET:TZIStDhwTLJSsVYaLBTI0HG7B0nNJ3px}
keycloak.admin.username=${KEYCLOAK_ADMIN_USERNAME:admin}
keycloak.admin.password=${KEYCLOAK_ADMIN_PASSWORD:test}

# Asset service properties
asset-service.rootUrl=${ASSET_SERVICE_ROOT_URL:http://localhost:8084/ars}


# Erda
erda.server=${ERDA_SERVER:io.erda.dk}
erda.port=${ERDA_PORT:21}
erda.user=${ERDA_USER:}
erda.password=${ERDA_PASSWORD:}
# The username is also a password in the httpURl
erda.httpURl=${ERDA_HTTP:https://sid.erda.dk/share_redirect/}${erda.user}
sftp.config.host=${SFTP_HOST:io.erda.dk}
sftp.config.port=${SFTP_PORT:22}
sftp.config.username=${SFTP_USERNAME:user}
sftp.config.privateKey=${SFTP_PRIVATE_KEY_LOCATION:./private.pem}
sftp.config.passphrase=${SFTP_PRIVATE_KEY_PASSPHRASE:password}
sftp.config.localFolder=${SFTP_LOCAL_FOLDER:target/DaSSCoStorage/}
sftp.config.remoteFolder=${SFTP_REMOTE_FOLDER:/}

logging.level.org.springframework=${LOG_LEVEL: INFO}
sftp.config.erdaConnectionPoolSize=${SFTP_ERDA_CONNECTION_POOL_SIZE:10}
logging.pattern.console= %d{yyyy-MM-dd HH:mm:ss} - %msg%n
logging.pattern.file= %d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%
server.port=8080

logging.level.dk.northtech.dasscofileproxy=${LOG_LEVEL: INFO}

server.tomcat.accesslog.enabled=true
server.tomcat.accesslog.pattern=%t %a "%r" %s (%D ms)
server.tomcat.basedir=target
server.tomcat.accesslog.directory=logs/
server.tomcat.accesslog.prefix=access_log
server.tomcat.accesslog.suffix=.log
server.tomcat.accesslog.max-days=30

share.parkingFolder=${PARKING_FOLDER:parking}
share.mountFolder=${SHARE_MOUNT_FOLDER:target}
share.nodeHost=${SHARE_NODE_HOST:http://localhost:8080}
share.totalDiskspace=${SHARE_DISK_SPACE:10000}
share.cacheDiskspace=${SHARE_CACHE_DISK_SPACE:200}
share.cacheFolder=${SHARE_CACHE_FOLDER:target/cache}
share.maxErdaSyncAttempts=${SHARE_MAX_ERDA_SYNC_ATTEMPTS:3}
share.totalDiskSpace=${SHARE_TOTAL_DISK_SPACE:10000}
share.thumbnailMimeTypes=${THUMBNAIL_MIME_TYPES:image/jpeg, image/gif, image/png, image/tiff, application/pdf}

spring.config.import=optional:file:./application-local.properties

# Enable debug logging for Spring Security
logging.level.org.springframework.security=${LOG_LEVEL: INFO}
# Enable debug logging for the HTTP requests and responses
logging.level.org.springframework.web=${LOG_LEVEL: INFO}
# Enable debug logging for the servlet processing
logging.level.org.springframework.web.servlet=${LOG_LEVEL: INFO}
# Enable debug logging for JAX-RS requests if using Jersey
logging.level.org.glassfish.jersey=${LOG_LEVEL: INFO}

spring.application.name=file-proxy

management.tracing.enabled=${TRACING_ENABLED:false}
management.otlp.tracing.endpoint=${TRACING_ENDPOINT:http://localhost:4318/v1/traces}
management.tracing.sampling.probability=${PROBABILITY:1.0}

logging.level.io.micrometer=DEBUG
logging.level.io.opentelemetry=DEBUG
logging.level.io.opentelemetry.context=DEBUG
logging.level.io.opentelemetry.api.trace=DEBUG
logging.level.io.opentelemetry.sdk.trace=DEBUG
logging.file.name=application.log

# We use liquibase to create a database for some tests
spring.liquibase.enabled=false