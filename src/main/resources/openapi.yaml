openapi: 3.0.1
info:
  title: DaSSCo
  description: |
    DaSSCO File Proxy API Documentation
  version: "1.0"
servers:
- url: "${apiServerUrl}"
  variables: {}
tags:
- name: Assets
  description: Endpoints related to assets
- name: Asset Files
  description: Endpoints related to assets' files.
- name: Shares
  description: Endpoints related to assets' allocation
paths:
  /assets/{assetGuid}/files:
    get:
      tags:
      - Assets
      summary: Get Asset Files
      description: Get a list of file metadata associated with an asset
      operationId: listFiles
      parameters:
      - name: assetGuid
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DasscoFile'
        "400-599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaSSCoError'
      security:
      - dassco-idp: []
  /assetfiles/{institutionName}/{collectionName}/{assetGuid}:
    get:
      tags:
      - Asset Files
      summary: Get List of Asset Files
      description: "Get a list of files based on institution, collection and asset_guid"
      operationId: listFiles_1
      parameters:
      - name: institutionName
        in: path
        required: true
        schema:
          type: string
      - name: collectionName
        in: path
        required: true
        schema:
          type: string
      - name: assetGuid
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
        "400-599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaSSCoError'
      security:
      - dassco-idp: []
    delete:
      tags:
      - Asset Files
      summary: Delete Asset File
      description: "Deletes an asset file based on institution, collection and asset_guid"
      operationId: deleteAsset
      parameters:
      - name: institutionName
        in: path
        required: true
        schema:
          type: string
      - name: collectionName
        in: path
        required: true
        schema:
          type: string
      - name: assetGuid
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json: {}
        "400-599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaSSCoError'
      security:
      - dassco-idp: []
  /assetfiles/{institutionName}/{collectionName}/{assetGuid}/{path}:
    get:
      tags:
      - Asset Files
      summary: Get Asset File by path
      description: "Get an asset file based on institution, collection, asset_guid\
        \ and path to the file"
      operationId: getFile
      parameters:
      - name: institutionName
        in: path
        required: true
        schema:
          type: string
      - name: collectionName
        in: path
        required: true
        schema:
          type: string
      - name: assetGuid
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Returns the file.
        "400-599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaSSCoError'
      security:
      - dassco-idp: []
    put:
      tags:
      - Asset Files
      summary: Upload File
      description: "Uploads a file. Requires institution, collection, asset_guid,\
        \ crc and file size (in mb)."
      operationId: putFile
      parameters:
      - name: institutionName
        in: path
        required: true
        schema:
          type: string
      - name: collectionName
        in: path
        required: true
        schema:
          type: string
      - name: assetGuid
        in: path
        required: true
        schema:
          type: string
      - name: crc
        in: query
        schema:
          type: integer
          format: int64
      - name: file_size_mb
        in: query
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileUploadResult'
        "400-599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaSSCoError'
      security:
      - dassco-idp: []
    delete:
      tags:
      - Asset Files
      summary: Delete Asset File by path
      operationId: deletefile
      parameters:
      - name: institutionName
        in: path
        required: true
        schema:
          type: string
      - name: collectionName
        in: path
        required: true
        schema:
          type: string
      - name: assetGuid
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json: {}
        "400-599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaSSCoError'
      security:
      - dassco-idp: []
  /v1/ftps/{params}:
    get:
      operationId: get
      parameters:
      - name: params
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/octet-stream: {}
      security:
      - dassco-idp: []
  /v1/ftps/listfiles/{path}:
    get:
      operationId: test
      parameters:
      - name: path
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
      security:
      - dassco-idp: []
  /v1/ftps/upload/{path}:
    put:
      operationId: update
      parameters:
      - name: path
        in: path
        required: true
        schema:
          type: string
      - name: cleanup
        in: query
        schema:
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Asset'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: boolean
      security:
      - dassco-idp: []
  /shares/assets/{assetGuid}/deleteShare:
    delete:
      tags:
      - Shares
      summary: Delete Share
      description: Deletes a share from the asset.
      operationId: close
      parameters:
      - name: assetGuid
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpInfo'
        "400-599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpInfo'
      security:
      - dassco-idp: []
  /shares/assets/{assetGuid}/createShare:
    post:
      tags:
      - Shares
      summary: Open Share
      description: Creates a share for the asset.
      operationId: createSambaServer
      parameters:
      - name: assetGuid
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreationObj'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpInfo'
        "400-599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaSSCoError'
      security:
      - dassco-idp: []
  /shares/assets/{assetGuid}/createShareInternal:
    post:
      tags:
      - Shares
      summary: Create Share (Internal)
      description: Creates a share for the asset
      operationId: createSambaServerInternal
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreationObj'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpInfo'
        "400-599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaSSCoError'
      security:
      - dassco-idp: []
  /shares/assets/{assetGuid}/synchronize:
    post:
      tags:
      - Shares
      summary: Synchronize ERDA
      description: Synchronizes the asset with ERDA
      operationId: synchronize
      parameters:
      - name: assetGuid
        in: path
        required: true
        schema:
          type: string
      - name: workstation
        in: query
        schema:
          type: string
      - name: pipeline
        in: query
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "400-599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaSSCoError'
      security:
      - dassco-idp: []
  /shares/assets/{assetGuid}/changeAllocation:
    post:
      tags:
      - Shares
      summary: Change Allocation
      description: Changes allocation for an asset
      operationId: updateStorageAllocation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssetStorageAllocation'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpInfo'
        "400-599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpInfo'
      security:
      - dassco-idp: []
  /v1/sftp/assets/{guid}/files/{file}:
    get:
      operationId: get_1
      parameters:
      - name: guid
        in: path
        required: true
        schema:
          type: string
      - name: file
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/octet-stream: {}
      security:
      - dassco-idp: []
  /v1/sftp/hello:
    get:
      operationId: hello
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: string
      security:
      - dassco-idp: []
  /v1/sftp/institutions/{institution}/collections/{collection}/assets/{guid}:
    get:
      operationId: listItems
      parameters:
      - name: institution
        in: path
        required: true
        schema:
          type: string
      - name: collection
        in: path
        required: true
        schema:
          type: string
      - name: guid
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
      security:
      - dassco-idp: []
components:
  schemas:
    DasscoFile:
      type: object
      properties:
        fileId:
          type: integer
          format: int64
        assetGuid:
          type: string
        path:
          type: string
        sizeBytes:
          type: integer
          format: int64
        crc:
          type: integer
          format: int64
        deleteAfterSync:
          type: boolean
        syncStatus:
          type: string
          enum:
          - NEW_FILE
          - SYNCHRONIZED
    DaSSCoError:
      type: object
      properties:
        type:
          type: string
        protocolVersion:
          type: string
        errorCode:
          type: string
          enum:
          - BAD_REQUEST
          - UPSTREAM_ERROR
          - INTERNAL_ERROR
          - FORBIDDEN
        errorMessage:
          type: string
    FileUploadResult:
      type: object
      properties:
        expected_crc:
          type: integer
          format: int64
        actual_crc:
          type: integer
          format: int64
        responseCode:
          type: integer
          format: int32
    Asset:
      type: object
      properties:
        institution:
          type: string
        collection:
          type: string
        assetGuid:
          type: string
    HttpInfo:
      type: object
      properties:
        path:
          type: string
        hostname:
          type: string
        total_storage_mb:
          type: integer
          format: int32
        cache_storage_mb:
          type: integer
          format: int32
        all_allocated_storage_mb:
          type: integer
          format: int32
        remaining_storage_mb:
          type: integer
          format: int32
        allocated_storage_mb:
          type: integer
          format: int32
        proxy_allocation_status_text:
          type: string
        http_allocation_status:
          type: string
          enum:
          - DISK_FULL
          - SUCCESS
          - BAD_REQUEST
          - UNKNOWN_ERROR
          - UPSTREAM_ERROR
          - SHARE_NOT_FOUND
          - INTERNAL_ERROR
        parent_size_mb:
          type: integer
          format: int64
    CreationObj:
      type: object
      properties:
        assets:
          type: array
          items:
            $ref: '#/components/schemas/MinimalAsset'
        users:
          type: array
          items:
            type: string
        allocation_mb:
          type: integer
          format: int32
    MinimalAsset:
      type: object
      properties:
        asset_guid:
          type: string
          description: The Global Unique Identifier generated for each asset
          example: ti-a01-202305241657
        parent_guid:
          type: string
          description: "Name of the parent media (in most cases, the same as original_parent_name,\
            \ it can be different if it is a derivative of a derivative)"
          example: ti-a02-202305241657
        institution:
          type: string
          description: The name of the institution which owns and digitised the specimen
          example: NNAD
        collection:
          type: string
          description: The collection name within the institution that holds the specimen
          example: test-collection
    AssetStorageAllocation:
      type: object
      properties:
        asset_guid:
          type: string
        new_allocation_mb:
          type: integer
          format: int32
  securitySchemes:
    dassco-idp:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: "${authServerUrl}/protocol/openid-connect/auth"
          tokenUrl: "${authServerUrl}/protocol/openid-connect/token"
      x-client-id: "${authClientId}"
      x-receive-token-in: request-body
