openapi: 3.0.1
info:
  title: DaSSCo
  description: |
    DaSSCO File Proxy API Documentation
  version: "1.0"
servers:
- url: "${apiServerUrl}"
  variables: {}
tags:
- name: Assets
  description: Endpoints related to assets
- name: Debug tools
  description: Endpoints for debugging
- name: Asset Files
  description: Endpoints related to assets' files.
- name: Shares
  description: Endpoints related to assets' allocation
- name: Log Files
  description: Endpoints for getting log files
paths:
  /assets/{assetGuid}/files:
    get:
      tags:
      - Assets
      summary: Get List of Asset Files Metadata
      description: Get a list of file metadata associated with an asset
      operationId: listFiles
      parameters:
      - name: assetGuid
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DasscoFile'
        "400-599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaSSCoError'
      security:
      - dassco-idp: []
  /assetfiles/{institutionName}/{collectionName}/{assetGuid}:
    get:
      tags:
      - Asset Files
      summary: Get List of Asset Files
      description: "Get a list of files based on institution, collection and asset_guid"
      operationId: listFiles_1
      parameters:
      - name: institutionName
        in: path
        required: true
        schema:
          type: string
      - name: collectionName
        in: path
        required: true
        schema:
          type: string
      - name: assetGuid
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - test-institution/test-collection/nt_asset_19/example.jpg
              - test-institution/test-collection/nt_asset_19/example2.jpg
        "400-599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaSSCoError'
      security:
      - dassco-idp: []
    delete:
      tags:
      - Asset Files
      summary: Delete Asset Files
      description: "Deletes all files for an asset based on institution, collection\
        \ and asset_guid"
      operationId: deleteAsset
      parameters:
      - name: institutionName
        in: path
        required: true
        schema:
          type: string
      - name: collectionName
        in: path
        required: true
        schema:
          type: string
      - name: assetGuid
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content. File has been deleted.
        "400-599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaSSCoError'
      security:
      - dassco-idp: []
  /assetfiles/{institutionName}/{collectionName}/{assetGuid}/{path}:
    get:
      tags:
      - Asset Files
      summary: Get Asset File by path
      description: "Get an asset file based on institution, collection, asset_guid\
        \ and path to the file"
      operationId: getFile
      parameters:
      - name: institutionName
        in: path
        required: true
        schema:
          type: string
      - name: collectionName
        in: path
        required: true
        schema:
          type: string
      - name: assetGuid
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Returns the file.
        "400-599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaSSCoError'
      security:
      - dassco-idp: []
    put:
      tags:
      - Asset Files
      summary: Upload File
      description: |-
        Uploads a file. Requires institution, collection, asset_guid, crc and file size (in mb).

        Can be called multiple times to upload multiple files to the same asset. If the files are called the same, the file will be overwritten.
      operationId: putFile
      parameters:
      - name: institutionName
        in: path
        required: true
        schema:
          type: string
      - name: collectionName
        in: path
        required: true
        schema:
          type: string
      - name: assetGuid
        in: path
        required: true
        schema:
          type: string
      - name: crc
        in: query
        schema:
          type: integer
          format: int64
      - name: file_size_mb
        in: query
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileUploadResult'
        "400-599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaSSCoError'
      security:
      - dassco-idp: []
    delete:
      tags:
      - Asset Files
      summary: Delete Asset File by path
      description: "Delete resource at the given path. If the resource is a directory,\
        \ it will be deleted along its content. If the resource is the base directory\
        \ for an asset the directory will not be deleted, only the content."
      operationId: deletefile
      parameters:
      - name: institutionName
        in: path
        required: true
        schema:
          type: string
      - name: collectionName
        in: path
        required: true
        schema:
          type: string
      - name: assetGuid
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content. File has been deleted.
        "400-599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaSSCoError'
      security:
      - dassco-idp: []
  /shares/assets/{assetGuid}/deleteShare:
    delete:
      tags:
      - Shares
      summary: Delete Share
      description: This service deletes a share and all files in the share without
        synchronizing ERDA. Files already persisted in ERDA will not be deleted.
      operationId: close
      parameters:
      - name: assetGuid
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpInfo'
        "400-599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpInfo'
      security:
      - dassco-idp: []
  /shares:
    get:
      tags:
      - Shares
      summary: Open Share
      description: Here you can open a share of an existing asset. The post body consists
        of a list of assets to be shared and a list of usernames of users that should
        have access to the share. The amount of space needed to be allocated also
        needs to be specified. The list of assets can only contain one asset when
        using this endpoint.
      operationId: createSambaServer
      parameters:
      - name: assetGuid
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpInfo'
        "400-599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaSSCoError'
      security:
      - dassco-idp: []
  /shares/assets/{assetGuid}/createShare:
    post:
      tags:
      - Shares
      summary: Open Share
      description: Here you can open a share of an existing asset. The post body consists
        of a list of assets to be shared and a list of usernames of users that should
        have access to the share. The amount of space needed to be allocated also
        needs to be specified. The list of assets can only contain one asset when
        using this endpoint.
      operationId: createSambaServer_1
      parameters:
      - name: assetGuid
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreationObj'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpInfo'
        "400-599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaSSCoError'
      security:
      - dassco-idp: []
  /shares/assets/{assetGuid}/synchronize:
    post:
      tags:
      - Shares
      summary: Synchronize ERDA
      description: "Close for further uploads to the asset, and schedules the asset\
        \ files for ERDA. Once this has been called the asset is 'closed' for now\
        \ and awaits upload to ERDA."
      operationId: synchronize
      parameters:
      - name: assetGuid
        in: path
        required: true
        schema:
          type: string
      - name: workstation
        in: query
        schema:
          type: string
      - name: pipeline
        in: query
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "400-599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaSSCoError'
      security:
      - dassco-idp: []
  /shares/assets/{assetGuid}/changeAllocation:
    post:
      tags:
      - Shares
      summary: Change Allocation
      description: Changes allocation for an asset
      operationId: updateStorageAllocation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssetStorageAllocation'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpInfo'
        "400-599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpInfo'
      security:
      - dassco-idp: []
  /logs/{fileName}:
    get:
      tags:
      - Log Files
      summary: Get a log file
      description: "Get a log file by name, use list endpoint to see names."
      operationId: getFile_1
      parameters:
      - name: fileName
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Returns the file.
        "400-599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaSSCoError'
      security:
      - dassco-idp: []
  /logs:
    get:
      tags:
      - Log Files
      summary: List logfiles
      description: List all logfiles in the log directory
      operationId: listLogs
      responses:
        "200":
          description: Returns the file.
        "400-599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaSSCoError'
      security:
      - dassco-idp: []
components:
  schemas:
    DasscoFile:
      type: object
      properties:
        fileId:
          type: integer
          description: Id of the File
          format: int64
        assetGuid:
          type: string
          description: The Global Unique Identifier generated for each asset
          example: ti-a01-202305241657
        path:
          type: string
          description: Path to the File relative from the asset folder
          example: assetfiles/test-institution/test-collection/nt_asset_19/
        sizeBytes:
          type: integer
          description: "Size, in bytes"
          format: int64
          example: 1024
        crc:
          type: integer
          description: "Cyclic Redundancy Check, used to verify if the file was transferred\
            \ correctly. Returns 507 if there is a mismatch between the file checksum\
            \ and the uploaded file checksum."
          format: int64
          example: 123
        deleteAfterSync:
          type: boolean
          description: Indicates if it should be deleted after Sync
          example: false
        syncStatus:
          type: string
          description: Sync status of the file
          example: SYNCHRONIZED
          enum:
          - NEW_FILE
          - SYNCHRONIZED
    DaSSCoError:
      type: object
      properties:
        type:
          type: string
        protocolVersion:
          type: string
        errorCode:
          type: string
          enum:
          - BAD_REQUEST
          - UPSTREAM_ERROR
          - INTERNAL_ERROR
          - FORBIDDEN
        errorMessage:
          type: string
    FileUploadResult:
      type: object
      properties:
        expected_crc:
          type: integer
          description: Expected CRC for the File
          format: int64
          example: 123
        actual_crc:
          type: integer
          description: Actual CRC for the File
          format: int64
          example: 123
        responseCode:
          type: integer
          format: int32
    HttpInfo:
      type: object
      properties:
        path:
          type: string
          description: Path to the asset
          example: /assetfiles/<institution>/<collection>/<asset_guid>/
        hostname:
          type: string
          description: Name of the host where the asset is uploaded
          example: https://storage.test.dassco.dk/file_proxy/api
        total_storage_mb:
          type: integer
          description: The total storage of the server where the FileProxy is deployed
          format: int32
          example: 90000
        cache_storage_mb:
          type: integer
          description: The total amount of storage dedicated for “caching” files for
            external linking and other use
          format: int32
          example: 20000
        all_allocated_storage_mb:
          type: integer
          description: The total amount of storage allocated
          format: int32
          example: 20000
        remaining_storage_mb:
          type: integer
          description: "The remaining storage on the server: total - cache - all_allocated\
            \ = remaining"
          format: int32
          example: 60000
        allocated_storage_mb:
          type: integer
          description: The amount of storage allocated on the server to the new asset
          format: int32
          example: 5000
        allocation_status_text:
          type: string
          description: A detailed error message if an error happens
          example: "Allocation failed, no more disk space"
        http_allocation_status:
          type: string
          description: Possible HTTP Status responses for allocation
          example: DISK_FULL
          enum:
          - DISK_FULL
          - SUCCESS
          - BAD_REQUEST
          - UNKNOWN_ERROR
          - UPSTREAM_ERROR
          - SHARE_NOT_FOUND
          - INTERNAL_ERROR
        parent_size_mb:
          type: integer
          description: Asset's parent size (in mb)
          format: int64
          example: 20
    Share:
      type: object
      properties:
        path:
          type: string
        id:
          type: integer
          format: int64
        assets:
          type: array
          items:
            type: string
    CreationObj:
      type: object
      properties:
        assets:
          type: array
          items:
            $ref: '#/components/schemas/MinimalAsset'
        users:
          type: array
          description: List of users
          items:
            type: string
            description: List of users
        allocation_mb:
          type: integer
          description: "Allocation in memory for the asset, in MB"
          format: int32
          example: 10
    MinimalAsset:
      type: object
      properties:
        asset_guid:
          type: string
          description: The Global Unique Identifier generated for each asset
          example: ti-a01-202305241657
        parent_guid:
          type: string
          description: "Name of the parent media (in most cases, the same as original_parent_name,\
            \ it can be different if it is a derivative of a derivative)"
          example: ti-a02-202305241657
        institution:
          type: string
          description: The name of the institution which owns and digitised the specimen
          example: NNAD
        collection:
          type: string
          description: The collection name within the institution that holds the specimen
          example: test-collection
    AssetStorageAllocation:
      type: object
      properties:
        asset_guid:
          type: string
        new_allocation_mb:
          type: integer
          format: int32
  securitySchemes:
    dassco-idp:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: "${authServerUrl}/protocol/openid-connect/auth"
          tokenUrl: "${authServerUrl}/protocol/openid-connect/token"
      x-client-id: "${authClientId}"
      x-receive-token-in: request-body
